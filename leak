==23720== Memcheck, a memory error detector
==23720== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==23720== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==23720== Command: ./csv2heapfile csv.txt heap.txt 4000
==23720== Parent PID: 23719
==23720== 
==23720== Conditional jump or move depends on uninitialised value(s)
==23720==    at 0x4C2E0F8: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x4015F0: fixed_len_sizeof(std::vector<char const*, std::allocator<char const*> >*) (heapfile.cpp:11)
==23720==    by 0x4019C4: add_fixed_len_page(Page*&, std::vector<char const*, std::allocator<char const*> >*) (heapfile.cpp:143)
==23720==    by 0x4011FF: main (csv2heapfile.cpp:85)
==23720== 
==23720== Invalid read of size 1
==23720==    at 0x4C2E0F4: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401965: fixed_len_page_freeslots(Page*&) (heapfile.cpp:121)
==23720==    by 0x40120E: main (csv2heapfile.cpp:89)
==23720==  Address 0x5a1e630 is 0 bytes after a block of size 4,000 alloc'd
==23720==    at 0x4C2CC70: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401818: _new_page(Page*) (heapfile.cpp:73)
==23720==    by 0x4018AC: init_fixed_len_page(Page*&, int, int) (heapfile.cpp:88)
==23720==    by 0x4010DB: main (csv2heapfile.cpp:55)
==23720== 
==23720== Invalid read of size 1
==23720==    at 0x4C2E0F4: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401220: main (csv2heapfile.cpp:92)
==23720==  Address 0x5a1e630 is 0 bytes after a block of size 4,000 alloc'd
==23720==    at 0x4C2CC70: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401818: _new_page(Page*) (heapfile.cpp:73)
==23720==    by 0x4018AC: init_fixed_len_page(Page*&, int, int) (heapfile.cpp:88)
==23720==    by 0x4010DB: main (csv2heapfile.cpp:55)
==23720== 
==23720== Invalid read of size 1
==23720==    at 0x4C2E0F4: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401965: fixed_len_page_freeslots(Page*&) (heapfile.cpp:121)
==23720==    by 0x40219D: write_page(Page*, Heapfile*, int) (heapfile.cpp:420)
==23720==    by 0x40127E: main (csv2heapfile.cpp:98)
==23720==  Address 0x5a1e630 is 0 bytes after a block of size 4,000 alloc'd
==23720==    at 0x4C2CC70: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401818: _new_page(Page*) (heapfile.cpp:73)
==23720==    by 0x4018AC: init_fixed_len_page(Page*&, int, int) (heapfile.cpp:88)
==23720==    by 0x4010DB: main (csv2heapfile.cpp:55)
==23720== 
==23720== Invalid write of size 8
==23720==    at 0x4C2F793: memcpy@@GLIBC_2.14 (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401B52: read_fixed_len_page(Page*, int, std::vector<char const*, std::allocator<char const*> >*&) (heapfile.cpp:204)
==23720==    by 0x402424: RecordIterator::next() (heapfile.cpp:476)
==23720==    by 0x400F80: scan(Heapfile*) (csv2heapfile.cpp:19)
==23720==    by 0x4012AA: main (csv2heapfile.cpp:105)
==23720==  Address 0x5ac0b20 is 0 bytes inside a block of size 1 alloc'd
==23720==    at 0x4C2CC70: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401B0F: read_fixed_len_page(Page*, int, std::vector<char const*, std::allocator<char const*> >*&) (heapfile.cpp:198)
==23720==    by 0x402424: RecordIterator::next() (heapfile.cpp:476)
==23720==    by 0x400F80: scan(Heapfile*) (csv2heapfile.cpp:19)
==23720==    by 0x4012AA: main (csv2heapfile.cpp:105)
==23720== 
==23720== Invalid read of size 1
==23720==    at 0x4C2E0F4: strlen (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401B65: read_fixed_len_page(Page*, int, std::vector<char const*, std::allocator<char const*> >*&) (heapfile.cpp:209)
==23720==    by 0x402424: RecordIterator::next() (heapfile.cpp:476)
==23720==    by 0x400F80: scan(Heapfile*) (csv2heapfile.cpp:19)
==23720==    by 0x4012AA: main (csv2heapfile.cpp:105)
==23720==  Address 0x5ac0b21 is 0 bytes after a block of size 1 alloc'd
==23720==    at 0x4C2CC70: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x401B0F: read_fixed_len_page(Page*, int, std::vector<char const*, std::allocator<char const*> >*&) (heapfile.cpp:198)
==23720==    by 0x402424: RecordIterator::next() (heapfile.cpp:476)
==23720==    by 0x400F80: scan(Heapfile*) (csv2heapfile.cpp:19)
==23720==    by 0x4012AA: main (csv2heapfile.cpp:105)
==23720== 
--23720-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--23720-- si_code=80;  Faulting address: 0x0;  sp: 0x802b99dd0

valgrind: the 'impossible' happened:
   Killed by fatal signal
==23720==    at 0x3805CF06: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23720==    by 0x380216D4: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23720==    by 0x380218F5: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23720==    by 0x3809DC03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23720==    by 0x380AC87C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable
==23720==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23720==    by 0x40322B: __gnu_cxx::new_allocator<char const*>::allocate(unsigned long, void const*) (new_allocator.h:104)
==23720==    by 0x402ED4: std::_Vector_base<char const*, std::allocator<char const*> >::_M_allocate(unsigned long) (in /home/lucao/Documents/CSC443/PL1/csv2heapfile)
==23720==    by 0x4029FD: char const** std::vector<char const*, std::allocator<char const*> >::_M_allocate_and_copy<char const**>(unsigned long, char const**, char const**) (stl_vector.h:1138)
==23720==    by 0x402718: std::vector<char const*, std::allocator<char const*> >::reserve(unsigned long) (vector.tcc:75)
==23720==    by 0x4016FB: fixed_len_read(void*, int, std::vector<char const*, std::allocator<char const*> >*) (heapfile.cpp:42)
==23720==    by 0x401B78: read_fixed_len_page(Page*, int, std::vector<char const*, std::allocator<char const*> >*&) (heapfile.cpp:209)
==23720==    by 0x402424: RecordIterator::next() (heapfile.cpp:476)
==23720==    by 0x400F80: scan(Heapfile*) (csv2heapfile.cpp:19)
==23720==    by 0x4012AA: main (csv2heapfile.cpp:105)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

